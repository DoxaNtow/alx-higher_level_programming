>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

 # Testing valid matrix division
>>> matrix_divided([[2, 4, 6], [8, 10, 12]], 2)
[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

# Testing Matrix with mixed data types (Expecting TypeError)
>>> matrix_divided([[2, 4, '6'], [8, 10, 12]], 2)
Traceback (most recent call last):
    ...
TypeError: matrix must be a list of lists of integers/floats

# Testing Matrix with rows of different lengths (Expecting TypeError)
>>> matrix_divided([[2, 4, 6], [8, 10], [12]], 2)
Traceback (most recent call last):
    ...
TypeError: Each row of the matrix must have the same size

# Testing Matrix division by zero (Expecting ZeroDivisionError)
>>> matrix_divided([[2, 4, 6], [8, 10, 12]], 0)
Traceback (most recent call last):
    ...
ZeroDivisionError: division by zero

# Testing Non-matrix input (Expecting TypeError)
>>> matrix_divided(5, 2)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats


# Testing Decimal division with various precision (Expecting specific output)
>>> matrix_divided([[1, 3, 5], [7, 9, 11]], 3)
[[0.33, 1.0, 1.67], [2.33, 3.0, 3.67]]



>>> matrix_divided([[0], [1], [2]], 3)
[[0.0], [0.33], [0.67]]

>>> matrix_divided([[], [], []], 5)
[[], [], []]

>>> matrix_divided([], 5)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats
